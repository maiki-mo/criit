{"version":3,"sources":["constants/styles.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["colors","blue","lightBlue","white","black","font","overpass","fontFamily","flex","centerFlexRow","display","flexDirection","justifyContent","alignItems","centerFlexCol","Workout","lazy","User","Settings","NavFooter","localStyles","container","styles","height","width","backgroundColor","className","style","fallback","exact","path","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.67076b65.chunk.js","sourcesContent":["export default {\n    colors: {\n        blue: '#123652',\n        lightBlue: '#A7B7C3',\n        white: '#fff',\n        black: '#000',\n    },\n    font: {\n        overpass: {\n            fontFamily: 'Lato, sans-serif',\n        },\n    },\n    flex: {\n        centerFlexRow: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        centerFlexCol: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n    },\n};\n","import React, { lazy, Suspense } from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch,\n} from 'react-router-dom';\n\nimport './App.css';\nimport styles from './constants/styles';\n\nconst Workout = lazy( () => import( './screens/Workout' ) );\nconst User = lazy( () => import( './screens/User' ) );\nconst Settings = lazy( () => import( './screens/Settings' ) );\nconst NavFooter = lazy( () => import( './components/NavFooter' ) );\n\nexport default () => {\n    const localStyles = {\n        container: {\n            ...styles.font.overpass,\n            height: '100vh',\n            width: '100vw',\n            backgroundColor: '#123652',\n        },\n    };\n\n    return (\n        <div className=\"App\" style={localStyles.container}>\n            <Router>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/workout\" />\n                        </Route>\n                        <Route exact path=\"/workout\">\n                            <Workout />\n                        </Route>\n                        <Route exact path=\"/settings\">\n                            <Settings />\n                        </Route>\n                        <Route exact path=\"/user\">\n                            <User />\n                        </Route>\n                    </Switch>\n                    <NavFooter />\n                </Suspense>\n            </Router>\n        </div>\n    );\n};\n","/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match( /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/ )\n);\n\nexport function register( config ) {\n    if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL( process.env.PUBLIC_URL, window.location.href );\n        if ( publicUrl.origin !== window.location.origin ) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener( 'load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if ( isLocalhost ) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker( swUrl, config );\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then( () => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                } );\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW( swUrl, config );\n            }\n        } );\n    }\n}\n\nfunction registerValidSW( swUrl, config ) {\n    navigator.serviceWorker\n        .register( swUrl )\n        .then( ( registration ) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if ( installingWorker == null ) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if ( installingWorker.state === 'installed' ) {\n                        if ( navigator.serviceWorker.controller ) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if ( config && config.onUpdate ) {\n                                config.onUpdate( registration );\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log( 'Content is cached for offline use.' );\n\n                            // Execute callback\n                            if ( config && config.onSuccess ) {\n                                config.onSuccess( registration );\n                            }\n                        }\n                    }\n                };\n            };\n        } )\n        .catch( ( error ) => {\n            console.error( 'Error during service worker registration:', error );\n        } );\n}\n\nfunction checkValidServiceWorker( swUrl, config ) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch( swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    } )\n        .then( ( response ) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get( 'content-type' );\n            if (\n                response.status === 404\n        || ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then( ( registration ) => {\n                    registration.unregister().then( () => {\n                        window.location.reload();\n                    } );\n                } );\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW( swUrl, config );\n            }\n        } )\n        .catch( () => {\n            console.log( 'No internet connection found. App is running in offline mode.' );\n        } );\n}\n\nexport function unregister() {\n    if ( 'serviceWorker' in navigator ) {\n        navigator.serviceWorker.ready\n            .then( ( registration ) => {\n                registration.unregister();\n            } )\n            .catch( ( error ) => {\n                console.error( error.message );\n            } );\n    }\n}\n","const reportWebVitals = ( onPerfEntry ) => {\n    if ( onPerfEntry && onPerfEntry instanceof Function ) {\n        import( 'web-vitals' ).then( ( {\n            getCLS, getFID, getFCP, getLCP, getTTFB\n        } ) => {\n            getCLS( onPerfEntry );\n            getFID( onPerfEntry );\n            getFCP( onPerfEntry );\n            getLCP( onPerfEntry );\n            getTTFB( onPerfEntry );\n        } );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}